#!/usr/bin/env bash
# shellcheck disable=2034,2209,2135,2155

MIX_ENV=dev

# Specify which release to use in production. See ./mix.exs for the possible
# values
RELEASE_NAME=dev

COMPOSE_PROJECT_NAME=kv-${RELEASE_NAME}

DOCKER_IMAGE_NAME=kv-dev

# In production, you will suffix the RELEASE_NAME name to the image name since
# we need to produce different images for the different releases
# DOCKER_IMAGE_NAME=samba6/kanmii:kv-${RELEASE_NAME}__0.0.0

# This filename
DOCKER_ENV_FILE=.env.example

# Mapped to port 4000 inside container and can be used to access app at
# 127.0.0.1:$DOCKER_HOST_PORT from the host
DOCKER_HOST_PORT=63999

# Set erlang cookie for distributed erlang. The cookie must be set to the same
# value for all nodes in the cluster
RELEASE_COOKIE=some-long-random-string
RELX_COOKIE=${RELEASE_COOKIE}

# The production routing table is obtained from the expression:
# iex> elixir_term |> :erlang.term_to_binary() |> Base.encode64()
#
# For example:
# iex> [{?a..?m, :"server_storage@network-name"}, {?n..?z, :"storage@network-name"}] |> :erlang.binary_to_term() |> Base.encode64()
#
# In the case of `:"storage@network-name"` for example, `storage` is the relase
# name. `network-name` will depend on clustering strategy. For instance, using
# docker, you may create docker network and use the name. For kubernetes, a
# service name will play the same role
ROUTING_TABLE=g2wAAAACaAJ0AAAABGQACl9fc3RydWN0X19kAAxFbGl4aXIuUmFuZ2VkAAVmaXJzdGFhZAAEbGFzdGFtZAAEc3RlcGEBZAATc2VydmVyX3N0b3JhZ2VAcHJvZGgCdAAAAARkAApfX3N0cnVjdF9fZAAMRWxpeGlyLlJhbmdlZAAFZmlyc3RhbmQABGxhc3RhemQABHN0ZXBhAWQADHN0b3JhZ2VAcHJvZGo=
